#!/system/bin/sh
#echo "$0 $*"> /proc/fac_printklog

VERSION="V8.2.4"

#BASE ON V4.1.3: MTK
#V4.0.0 MTK
#1. 針對 MTK 修改 DIT File 的名稱
#2. open Camera 加入新參數
	#CameraTest Para1 Para2 Para3 Para4
	#Para1: 0
	#Para2: 0: off, 1: on
	#Para3: sensor mode index
	#Para4: Timeout value in decimal.

	#Para1: 1,  其餘同上
	#Para1: 14, 其餘同上
	#Para1: 15, 其餘同上
	#Para1: 19, 其餘同上

#3. DualCamera Para1 Para2 Para3 Para4 Para5
	#Para1: 0
	#Para2: 0: off, 1: on
	#Para3: sensor mode index of rear1
	#Para4: sensor mode index of rear2
	#Para5: Timeout value in decimal.
	#rear1, rear2 will defined by DIT/BSP

#4. DualCamera 6, 7(DIT校正相關指令)的敘述, Para有關CameraDirID的部分都改成

	#0: Back camera		100: Back camera (2nd setting)		200: Back camera (3rd setting)
	#1: Front camera	101: Front camera (2nd setting)		201: Front camera (3rd setting)
	#2: Back camera2	102: Back camera2 (2nd setting)		202: Back camera2 (3rd setting)
	#3: Front camera2	103: Front camera2 (2nd setting)	203: Front camera2 (3rd setting)
	#4: Back camera3	104: Back camera3 (2nd setting)		204: Back camera3 (3rd setting)


#V4.1.0 MTK
#1. 修改開啟Camera 時檢查 LOG 的機制。
#2. 修正雙開時，因為輸入變數個數不同，而導致雙開時timeout 的值是錯的問題。
#3. 新增雙開時會檢查finish startPreview0" 和 "finish startPreview2" 是否同時存在於APK_LOG_FILE
#4. 移除AP的LOG 檔案"APK_LOG_FILE" 從 exit() 移到 init()

#V4.1.1 MTK
#1. 修正判斷AE/ISO 設成auto 時 APK_LOG_FILE 裡面是會有兩行相同的LOG(set_iso_exp done)，所以判斷checklog 改成 >=1

#V4.1.2 MTK
#修正判斷dual 的字串比較

#V4.1.3 MTK
#拍照不刪除照片，統一由ATD來自行刪除


#V5.0.0 QCOM
#1. sensor mode index的prop改為QCOM對應的vendor.camera.StreamModeIndex
#2. android.permission.READ_EXTERNAL_STORAGE在Android 13被廢棄, 改為android.permission.READ_MEDIA_IMAGES
#3. android.permission.WRITE_EXTERNAL_STORAGE在Android 13也不能用, pm grant移除
#4. jpg, raw和CameraTest_Apk.log存檔路徑改為/data/data/com.asus.cameratest
#5. DualCamera用id 4開主鏡, 因id 0為SAT

#V5.0.1 QCOM
#1. 修改部分prop沒正確用到vendor.camera.StreamModeIndex
#2. DualCamera 4的主鏡用id 4開, DualCamera 6的主鏡用id 0(SAT)開, check_log做分別判斷
#3. 修改為QCOM平台所用的test_BinMerge, test_qafCali

#V5.0.2 QCOM
#1. CameraTest.apk權限改用android.permission.MANAGE_EXTERNAL_STORAGE
#2. jpg, raw和CameraTest_Apk.log存檔路徑改回/sdcard

#V5.0.3 QCOM
#1. 傳送"cameraID" intent 給CameraTest.apk接收
#2. 因id 0為SAT, 主鏡都改為用id 4來開, check_log判斷"finish startPreview4"表示主鏡完成開啟

#V5.0.4 QCOM
#1. 修正關閉com.asus.cameratest時, kill process後系統又非預期的fork出來, 造成下次camera打不開


#V6.0.0
# 將 V5.0.4 QCOM  merged V4.1.3  轉成 MTK 版本
#1. 主要修改為 Camera ID 0 => 主鏡
#2. sensor index 改成 MTK property  (需要注意，雙開  MTK property 只有一個，所以只能是相同的mode index)
#3. 加入 rawneed 的註解
	#NoRAW:0
	#RAW_SENSOR_DNG_FILE:1
	#RAW10_FILE:2

#V6.0.1
#將主鏡的Camera ID 0 => 4

#V6.0.2
#在 close Camera 的時候增加 delay,
#避免因為關閉到開啟camera 的間隔太短導致開不起來。

#V7.0.0
#必須配合 CameraTest APP version 2.0
#1.	目前DualCamera  0   就是給 main (imx766)/ super widw (OV13B)
#       DualCamera  1   就是給 OV13B(super wide) / S5KJD1SM15(Tele)

#2. 配合APK 雙開拍照產生的檔案名稱，後面的_ID0  是看拍照的 Camera ID 所產生
#   檔案名稱是依照camera ID 命名並做拍完照的檔案檢查
#   檢查成功會再轉成工廠需要的命名方式    _+(後鏡為0/2/4/6….)(前鏡為1/3/5…..)

#V8.0.0
#加入MTK/ QCOM 切換的選項
#加入config 區域，以方便之後案子

#V8.0.1~3
#修改開啟camera 的流程

#V8.1.0
#修改 TELE 使用FUll 解析度

#V8.1.1
#修改 Close 不是用強制kill pid 的方式

#V8.2.0
#加入讀取SKU(vendor.camera.standard_sku) 來判斷不同案子以便切換sensor size
#加入 ROG8_S  tele OV8856 sensor size
#updata APK 版本 2.2

#V8.2.1
#支援可單獨下A_Gain / D_Gain / ISP_Gain 的 property (需要修改sensor.c)
#updata APK 版本 2.4
#(2.3: add NullPointerException, 2.4: 修改layout，將preview的畫面往下移50dp，讓preview 的亮度不會干擾到前鏡頭校正)
#update APK V2.5 新增 CONTROL_POST_RAW_SENSITIVITY_BOOST ISP 才會生效

#V8.2.2
#init the property

#V8.2.3
#fix CameraTest 18 0 8 issue

#V8.2.4
#remove init property, add init property in close camera


#Debug message switch
DEBUG=0

#App name
APP="com.asus.cameratest"
#APK 版本 2.6

#unset variables
unset flow id title value ret

#Init camer id
cameraID=0


#Init DualCamera CameraID & Picture size
FirstCameraID=-1
SecondCameraID=-1
jpegWidth_2=0
jpegHeight_2=0

########### +++ Config +++ ###########

# $4 = 1:DualCamera 2:Qcom
#DualCamera
is_dual=0

# MTK  版本 => MTK=1
# QCOM 版本 => MTK=0
MTK=0


#SKU=1 => ROG8
#SKU=3 => ROG8_S
SKU=`getprop vendor.camera.standard_sku`


# Main_Cam
MainCamID=4
MainCam_Index_1=2
MainCam_jpegWidth_1=4096
MainCam_jpegHeight_1=3072


MainCam_Index_2=12
MainCam_jpegWidth_2=4096
MainCam_jpegHeight_2=3072

# Front_Cam
Front_CamID=1
Front_Cam_Index=2
Front_Cam_jpegWidth=3264
Front_Cam_jpegHeight=2448

# Wide_Cam
WideCamID=2
WideCam_Index=2
WideCam_jpegWidth=4160
WideCam_jpegHeight=3120


# Tele_Cam
if [ "$SKU" -eq 1 ]; then
	#ROG8_S  OV8856
	TeleCamID=3
	TeleCam_Index=0
	TeleCam_jpegWidth=2592
	TeleCam_jpegHeight=1944
else
	#ROG8  s5kjd1sm_r
	TeleCamID=3
	TeleCam_Index=2
	TeleCam_jpegWidth=3280
	TeleCam_jpegHeight=2460
fi


############ --- Config --- ###########

for var in "$@"
do
	tmp="$var"
done

if [ "$var" == 'dual' ]; then
	#echo "set is_dual =1"
	is_dual=1
fi

is_check_log=0
##################################
#Kirin/ROG5 is use QCOM 3A and QCOM flow
#calibration name setting
#/vendor/bin/${prefix}_af_cali
#/vendor/bin/${prefix}_ae_cali
##################################

if [ "$MTK" -eq 0 ]; then
	#Qcom flow
	prefix=q
else
	#prefix=dit
	prefix=mtk
fi

syslog() {
	log -t CameraTest -p I "$@"
	#echo "$@" >> $LOGCAT_LOG_FILE
}

enable_touch() {
	if [ "$1" -eq "0" ]; then
		title="Disable touch"
		value=0
	else
		title="Enable touch"
		value=1
	fi

	syslog "==================$title================="
	if [ -x "/data/data/touch_function" ]; then
		/data/data/touch_function $value &> /dev/null
	fi

	if [ $value -eq 0 -a -x "/data/data/touch_function" ]; then
		/data/data/LedTest 0 &> /dev/null
	fi

	if [ -x "/data/data/capsensor_function" ]; then
		/data/data/capsensor_function $value &> /dev/null
	fi

	#disable thermal-engine for dualcamera
	if [ "$is_dual" -eq "1" ]; then
		test $value -eq 1 && start thermal-engine || stop thermal-engine
	fi
}

_log() {
	echo "`date` $@" >> $SCRIPT_LOG_FILE
	#test "$DEBUG" -eq "1" && echo "`date +%H:%M:%S` $@"
}

logi() {
	_log I $@
}

logd() {
	_log D $@
}

loge() {
	_log E $@
}

#log success/fail message and show processing result on the consol
#$1:success/fail $2:return string
my_exit() {
	#rm -f $APK_LOG_FILE
	if [ "$1" == "success" ]
	then
		shift 1
		syslog "================== CameraTest command executed success, $@ ================="
		logi "<== return success(1)"
		ATD_ret="1"
		ret=0
	else
		shift 1
		syslog "================== CameraTest command executed failed, $@ ================="
		loge "<### return fail(0)"
		ATD_ret="0"
		ret=1
	fi

	echo $ATD_ret
	exit $ret
}

check_log() {
	is_check_log=0
	syslog "================== CameraTest command check_log $1 ================="
	for i in `seq 80`; do
		if [ -f "$APK_LOG_FILE" ]; then
			is_check_log=`cat "$APK_LOG_FILE" |grep --line-buffered "$1"|wc -l `
			#echo is_check_log $is_check_log
			#grep -w "$1" $APK_LOG_FILE &> /dev/null
			if [ "$is_check_log" -ge 1 ]; then
				syslog "================== CameraTest command check_log Check $1 PASS ================="
				break
			fi
		else
		  sleep 0.2
		fi
	done
}

close_camera() {
	syslog "================== CameraTest command close_camera  E ================="
	name="$APP"

	am broadcast -a asus.camera.close -f 0x10000000 &> /dev/null
	am force-stop $APP
	sleep 1

	for i in `seq 10`; do
		pid=`pidof $name`
		syslog "================== CameraTest command close_camera  E1  close pid:$pid ================="
		#am broadcast -a asus.camera.close -f 0x10000000 &> /dev/null
		if [ "$pid" ]; then
			syslog "================== CameraTest command close_camera  E1 force-stop error, kill pid:$pid ================="
			su -0 kill -9 $pid
			sleep 0.2
		else
			sleep 0.2
			syslog "================== CameraTest command close_camera  E2================="
			pid=`pidof $name`
			if [ "$pid" ]; then
				su -0 kill -9 $pid
				syslog "================== CameraTest command close_camera  E3================="
				continue
			fi
			break
		fi
	done


	if [ "$MTK" -eq 0 ]; then
		#Qcom flow
		setprop vendor.camera.StreamModeIndex -1
		setprop vendor.camera.DualStreamModeIndex -1
		setprop vendor.camera.ADGain 0
	else
		#MTK flow
		setprop vendor.debug.cameng.force_sensormode 0
	fi
	setprop camera.test.cameramode ''
	#enable_touch 1
	syslog "================== CameraTest command close_camera X ================="
	sleep 0.5
}

close_camera_fast() {
	syslog "================== CameraTest command close_camera_fast  E ================="

	am broadcast -a asus.camera.close -f 0x10000000 &> /dev/null
	am force-stop $APP

	if [ "$MTK" -eq 0 ]; then
		#Qcom flow
		setprop vendor.camera.StreamModeIndex -1
		setprop vendor.camera.DualStreamModeIndex -1
	else
		#MTK flow
		setprop vendor.debug.cameng.force_sensormode 0
	fi
	setprop camera.test.cameramode ''
	#enable_touch 1
	syslog "================== CameraTest command close_camera_fast X ================="
}

open_camera() {
	syslog "================== CameraTest command open_camera E ================="
	name=$APP

	#NoRAW:0
	#RAW_SENSOR_DNG_FILE:1
	#RAW10_FILE:2
	rawneed=2
	#CAM0 RAW: 4096x3072 MIPI Stride:0
	#CAM1 RAW: 3264x2448 MIPI Stride:0
	#CAM2 RAW: 4160x3120 MIPI Stride:0
	#CAM3 RAW: 2592x1944 MIPI Stride:3280

	#enable CameraTest permission
	pm grant $APP android.permission.CAMERA
	pm grant $APP android.permission.ACCESS_MEDIA_LOCATION
	syslog "================== CameraTest command open_camera Set ModeIndex and W/H ================="
	if [ "$is_dual" -eq "0" ]; then

		if [ "$MTK" -eq 0 ]; then
			#Qcom flow
			setprop vendor.camera.StreamModeIndex $2
		else
			#MTK flow
			setprop vendor.debug.cameng.force_sensormode $2
		fi

		if [ $1 -eq 0 ]; then
			if [ "$2" -eq $MainCam_Index_1 ]; then
				jpegWidth=$MainCam_jpegWidth_1
				jpegHeight=$MainCam_jpegHeight_1
			elif [ "$2" -eq $MainCam_Index_2 ]; then
				jpegWidth=$MainCam_jpegWidth_2
				jpegHeight=$MainCam_jpegHeight_2
			else
				echo "QCOM Camera $1 support modeindex $MainCam_Index_1 / $MainCam_Index_2 only"
				my_exit fail
			fi

			cameraID=$MainCamID
			cameraMode=0

		fi
		if [ $1 -eq 1 ]; then
			if [ "$2" -eq $Front_Cam_Index ]; then
				jpegWidth=$Front_Cam_jpegWidth
				jpegHeight=$Front_Cam_jpegHeight
			else
				echo "QCOM Camera $1 support modeindex $Front_Cam_Index only"
				my_exit fail
			fi
				cameraID=$Front_CamID
				cameraMode=$Front_CamID
		fi
		if [ $1 -eq 14 ]; then
			if [ "$2" -eq $WideCam_Index ]; then
				jpegWidth=$WideCam_jpegWidth
				jpegHeight=$WideCam_jpegHeight
			else
				echo "QCOM Camera $1 support modeindex $WideCam_Index only"
				my_exit fail
			fi
				cameraID=$WideCamID
				cameraMode=$WideCamID
		fi
		if [ $1 -eq 19 ]; then
			if [ "$2" -eq $TeleCam_Index ]; then
				jpegWidth=$TeleCam_jpegWidth
				jpegHeight=$TeleCam_jpegHeight
			else
				echo "QCOM Camera $1 support modeindex $TeleCam_Index only"
				my_exit fail
			fi
				cameraID=$TeleCamID
				cameraMode=$TeleCamID
		fi
	else
		#雙開流程:
		if [ "$MTK" -eq 0 ]; then
			#Qcom flow
			setprop vendor.camera.StreamModeIndex $2
			setprop vendor.camera.DualStreamModeIndex $3
		else
			#MTK flow
			setprop vendor.debug.cameng.force_sensormode $2
		fi

		if [ $1 -eq 0 ]; then #Camera ID  0/2
			if [ "$2" -eq $MainCam_Index_1 ] && [ "$3" -eq $WideCam_Index ]; then
				jpegWidth=$MainCam_jpegWidth_1
				jpegHeight=$MainCam_jpegHeight_1

				jpegWidth_2=$WideCam_jpegWidth
				jpegHeight_2=$WideCam_jpegHeight
			else
				echo "QCOM DualCamera $1 support modeindex $MainCam_Index_1/$WideCam_Index only"
				my_exit fail
			fi

			#cameraID=4
			cameraMode=4
			FirstCameraID=$MainCamID
			SecondCameraID=$WideCamID

		fi
		if [ $1 -eq 1 ]; then #Camera ID  2/3
			if [ "$2" -eq $WideCam_Index ] && [ "$3" -eq $TeleCam_Index ]; then
				jpegWidth=$WideCam_jpegWidth
				jpegHeight=$WideCam_jpegHeight

				jpegWidth_2=$TeleCam_jpegWidth
				jpegHeight_2=$TeleCam_jpegHeight
			else
				echo "QCOM DualCamera $1 support modeindex $WideCam_Index/$TeleCam_Index only"
				my_exit fail
			fi
			#cameraID=6
			cameraMode=6
			FirstCameraID=$WideCamID
			SecondCameraID=$TeleCamID
		fi
	fi

	readyToOpenCam=0
	#enable_touch 0
	for i in `seq 10`; do
		syslog "================== CameraTest command open_camera E12 ================="
		pid=`pidof $name`
		syslog "================== CameraTest command open_camera E13 ================="
		if [ -z "$pid" ]; then
			try_count=0
			while [ true ]
			do
				readyToOpenCam=1
				time=`date +%T.%s`
				seq_id=$(date +%s)
				syslog "================== CameraTest open cameramode=$cameraMode, logpath=$APK_LOG_FILE, time=$time, seq_id=$seq_id ================="
				syslog "CameraID: $cameraID, FirstCameraID: $FirstCameraID"
				syslog "jpegWidth: $jpegWidth, jpegHeight: $jpegHeight"
				syslog "SecondCameraID: $SecondCameraID"
				syslog "jpegWidth_2: $jpegWidth_2, jpegHeight_2: $jpegHeight_2"
				syslog "raw=$rawneed"
				am start -S -W -n $name/.MainActivity --ei cameramode $cameraMode --esa picsize $jpegWidth,$jpegHeight,$jpegWidth_2,$jpegHeight_2 --ei rawneed "$rawneed" --es logpath "$APK_LOG_FILE" --es time "$time" --es seq_id "$seq_id" --es cameraID $cameraID --es FirstCameraID $FirstCameraID --es SecondCameraID $SecondCameraID > /dev/null

				if check_log "$seq_id" ; then
					syslog "============= Get app seq id $seq_id, Open Done ==========================="
					break
				else
					rm -f $APK_LOG_FILE
					(( try_count++ ))
					syslog "============= App intent is not correct, restart it ... retry $try_count ============="
					if [ $try_count -gt 5 ]; then
						break
					fi
				fi
				syslog "============= CameraTest open cameramode=$1  X1 ==========================="
			done
    	else
			if [ readyToOpenCam -eq 1 ]; then
			syslog "================== CameraTest command open_camera pid: $pid ================="
			break
			else
				syslog "================== CameraTest command kill unexpected pid: $pid ================="
				su -0 kill -9 $pid
				sleep 0.2
			fi
		fi
		syslog "============= CameraTest open cameramode=$1  X2 ==========================="
	done
	syslog "============= CameraTest open cameramode=$1  X3 ==========================="
	setprop camera.test.cameramode $cameraMode
	syslog "============= CameraTest open cameramode=$1  X4 ==========================="
}




#$1 ... break condition
#$2 timeout vale (decimal seconds, default 10s)
set_timeout() {
	syslog "============= CameraTest command  set_timeout ============="
	if [ -z "$2" ]; then
		let TimeOutValue=10
	else
		let TimeOutValue=$2
	fi
	logd "> set_timeout($TimeOutValue)"
	is_check_log=0

	syslog "================== CameraTest command check_log "$APK_LOG_FILE" ================="
	for i in `seq $TimeOutValue`; do

		#echo CHHO $1 is_check_log: $is_check_log cameraMode: $cameraMode
		if [ "$1" == "finish startPreview0" ] && [ $3 == 1 ]; then
			syslog "============= CameraTest: check finish start dualPreview   ==========================="
			#echo CHHO is_check_log startPreview$MainCamID $is_check_log
			check_log "finish startPreview$MainCamID"

			if [ "$is_check_log" -eq 1 ]; then
				check_log "finish startPreview$WideCamID"
				#echo CHHO is_check_log startPreview$WideCamID $is_check_log
				if [ "$is_check_log" -eq 1 ]; then
					my_exit success "for msg \"$1\""
					break
				fi
			fi
		elif [ "$1" == "finish startPreview1" ] && [ $3 == 1 ]; then
			syslog "============= CameraTest: check finish start dualPreview   ==========================="
			#echo CHHO is_check_log startPreview$WideCamID $is_check_log
			check_log "finish startPreview$WideCamID"
			if [ "$is_check_log" -eq 1 ]; then

				check_log "finish startPreview$TeleCamID"
				#echo CHHO is_check_log startPreview$TeleCamID $is_check_log
				if [ "$is_check_log" -eq 1 ]; then
					my_exit success "for msg \"$1\""
					break
				fi
			fi
		else
			#echo CHHO $1 is_check_log: $is_check_log cameraID: $cameraID
			#syslog "============= CameraTest: check finish start singlePreview   ==========================="
			#check_log "finish startPreview$cameraID"
			if [ "$1" == "finish startPreview0" ] && [ $MainCamID == 4 ]; then
				check_log "finish startPreview$MainCamID"
			else
				check_log "$1"
			fi

			if [ "$is_check_log" -ge 1 ]; then
				my_exit success "for msg \"$1\""
				break
			fi
		fi

		#echo CHHO check fail
		sleep 1
		logd "time out value now is $TimeOutValue do retry"
	done
	my_exit fail "wait msg timeout \"$1\", timeout value ${2}s"
}

######## Take Picture Function ########
#$1 command id
#$2 picture name
#$3 timeout vale (decimal seconds)
#######################################
set_timeout_takepic() {
	let "TimeOutValue=$3*10"
	logd "> set_timeout($TimeOutValue)"
	if [ $1 -eq 5 ]; then
		ext=raw
		cond="takeRawPicture"
	else
		ext=jpg
		cond="takePicture finish"
	fi
	filename=/sdcard/$2
	if check_log "$cond"; then
		syslog "================== CameraTest command check img file ${filename}.${ext} is_dual:$is_dual ================="
		for i in `seq $TimeOutValue`; do
			if [ "$is_dual" -eq "1" ]; then

				#檔案名稱是依照camera ID 命名並做拍完照的檔案檢查
				#檢查成功會再轉成工廠需要的命名方式
				#雙開檔案名稱都會統一後面加入 _(後鏡為0/2/4/6….)(前鏡為1/3/5…..)
				if [ -f "${filename}_ID0.${ext}" -a -f "${filename}_ID2.${ext}" ]; then  #dualcam 0
					syslog "================== CameraTest command check img file ${filename}_0.${ext} ${filename}_2.${ext}    take picture sucess in dualcam ================="
					#APK 檔案名稱是依照camera ID 所產生，需轉成工廠要用的名稱
					rename "${filename}_ID0.jpg" "${filename}_0.jpg"
					rename "${filename}_ID0.raw" "${filename}_0.raw"
					rename "${filename}_ID2.jpg" "${filename}_2.jpg"
					rename "${filename}_ID2.raw" "${filename}_2.raw"
					my_exit success "for msg \"$cond\""
				elif [ -f "${filename}_ID2.${ext}" -a -f "${filename}_ID3.${ext}" ]; then #dualcam 1
					syslog "================== CameraTest command check img file ${filename}_2.${ext} ${filename}_3.${ext}    take picture sucess in dualcam ================="
					#APK 檔案名稱是依照camera ID 所產生，需轉成工廠要用的名稱
					rename "${filename}_ID2.jpg" "${filename}_2.jpg"
					rename "${filename}_ID2.raw" "${filename}_2.raw"
					rename "${filename}_ID3.jpg" "${filename}_4.jpg"
					rename "${filename}_ID3.raw" "${filename}_4.raw"
					my_exit success "for msg \"$cond\""
				fi


			elif [ -f "${filename}.${ext}" ]; then
				syslog "================== CameraTest command check img file take picture sucess ================="
				my_exit success "for msg \"$cond\""
			fi
			usleep 100000
			logd "time out value now is , retry $i"
		done
	fi

	my_exit fail "wait msg timeout \"$cond\", timeout value ${3}s"
}

######### check_all_status ##########
#check all status before open camera
#check bettery capacity
#####################################
check_all_status() {


	#check phone's battery
	battery=`cat /sys/class/power_supply/battery/capacity`
	#echo battery : $battery
	syslog "phone's battery left = $battery"
}


camera_preview_switch() {
	#0: off
	if [ "$2" == 0 ]; then
		syslog "================== CameraTest disable camera $1 preview start================="
		close_camera
		my_exit success "close camera $1"
	fi
	#1: on
	if [ "$2" == 1 ]; then
		syslog "================== CameraTest enable camera $1 preview start================="
		#init status before open camera
		check_all_status

		#close_camera
		syslog "================== CameraTest enable camera $1 preview close_camera_fast:E ================="
		close_camera_fast
		syslog "================== CameraTest enable camera $1 preview close_camera_fast:X ================="

		open_camera $1 $3 $4

		syslog "================== CameraTest enable camera $1 preview end================="
	fi
}

#check if dit is ready
check_dit() {
	test -f /vendor/lib64/DataSet/ispDB/ParameterDB.db || my_exit fail "ParameterDB.db not exist!"
}

af_calibration() {
	/vendor/bin/${prefix}_af_cali $@
	exit 0
}

ae_calibration() {
	/vendor/bin/${prefix}_ae_cali $@
	exit 0
}

test_mafCali() {
	if [ "$1" == 21 ]; then
		  /vendor/bin/test_mafCali $2 25
	fi
	if [ "$1" == 22 ]; then
		if [ "$3" == 0 ]; then
		   /vendor/bin/test_mafCali $2 6
		fi

		if [ "$3" == 1 ]; then
		   /vendor/bin/test_mafCali $2 3
		fi

		if [ "$3" == 2 ]; then
		   /vendor/bin/test_mafCali $2 58
		fi
		#No Z1Z2 in project Kirin. No need case $3 == 3
		if [ "$3" == 4 ]; then
		   /vendor/bin/test_mafCali $2 59
		fi
		if [ "$3" == 5 ]; then
		   /vendor/bin/test_mafCali $2 60
		fi
	fi
}

test_qafCali() {
	if [ "$1" == 21 ]; then
		  /vendor/bin/test_qafCali $2 25
	fi
	if [ "$1" == 22 ]; then
		if [ "$3" == 0 ]; then
		   /vendor/bin/test_qafCali $2 6
		fi

		if [ "$3" == 1 ]; then
		   /vendor/bin/test_qafCali $2 3
		fi

		if [ "$3" == 2 ]; then
		   /vendor/bin/test_qafCali $2 58
		fi
		#No Z1Z2 in project Kirin. No need case $3 == 3
		if [ "$3" == 4 ]; then
		   /vendor/bin/test_qafCali $2 59
		fi
		if [ "$3" == 5 ]; then
		   /vendor/bin/test_qafCali $2 60
		fi
	fi
}

infinity_mode_switch() {
	#0: off
	if [ "$1" == 0 ]; then
		syslog "================== CameraTest enable autofocus mode start ================="
		am broadcast -a asus.camera.setparameter --ei focusmode 0 -f 0x10000000 > /dev/null
	#1: on
	elif [ "$1" == 1 ]; then
		syslog "================== CameraTest enable infinity mode start ================="
		am broadcast -a asus.camera.setparameter --ei focusmode 1 -f 0x10000000 > /dev/null
	#2: focus
	elif [ "$1" == 2 ]; then
		syslog "================== CameraTest enable autofocus mode start and trigger focus ================="
		am broadcast -a asus.camera.setparameter --ei focusmode 2 -f 0x10000000 > /dev/null
	else
		echo "0: off; 1: on; 2: focus"
		exit 0
	fi
}

############# take_picture #######
#$1 command id
#$2 picture file name
##################################
take_picture() {
	focusneed=0
	flashmode=0
	filename=/sdcard/$2
	test $1 -eq 2 -o $1 -eq 9  && focusneed=1
	test $1 -eq 9 -o $1 -eq 10 && flashmode=1
	#rm -f /data/misc/camera/*.RAWMIPI
	#rm -f ${filename}*.jpg ${filename}*.raw
	syslog "================== CameraTest Take picture (command=$1, flash=$flashmode, af=$focusneed, filename=$filename   ) command start================="
	am broadcast -a asus.camera.setsavepath --es savepath "${filename}" -f 0x10000000 > /dev/null
	am broadcast -a asus.camera.setparameter --ei flashmode "$flashmode" -f 0x10000000 > /dev/null
	am broadcast -a asus.camera.takepicture --ei focusneed "$focusneed" -f 0x10000000 > /dev/null
}

check_cal_result() {
	for name in /data/data/$1 /data/$1; do
		if [ -f "$name" ]; then
			status=`cat $name`
			if [ "$status" == 1 ]; then
				echo "1"
			else
				echo "0"
			fi
			return
		fi
	done
	echo "no $1"
}

calibration() {

	if [ "$1" == "6" ]; then
		syslog "================== CameraTest calibration command start================="
	else
		ext="_golden"
		syslog "================== CameraTest get golden data command start================="
	fi

	if [ "$3" == "" ]; then
		id=$2
	else
		id=DUAL_$2$3
	fi
	sh /vendor/bin/${prefix}_cali${ext} $@
	if [[ "$id" == 0 || "$id" == 100 || "$id" == 200 ]]; then
		check_cal_result cal${ext}_rear0_result.txt
	elif [[ "$id" == 1 || "$id" == 101 || "$id" == 201 ]]; then
		check_cal_result cal${ext}_front1_result.txt
	elif [[ "$id" == 2 || "$id" == 102 || "$id" == 202 ]]; then
		check_cal_result cal${ext}_rear2_result.txt
	elif [[ "$id" == 3 || "$id" == 103 || "$id" == 203 ]]; then
		check_cal_result cal${ext}_front3_result.txt
	elif [[ "$id" == 4 || "$id" == 104 || "$id" == 204 ]]; then
		check_cal_result cal${ext}_rear4_result.txt
	elif [[ "$id" == 5 || "$id" == 105 || "$id" == 205 ]]; then
		check_cal_result cal${ext}_front5_result.txt
	elif [[ "$id" == "DUAL_02" || "$id" == "DUAL_20" ]]; then
		camera_status=`check_cal_result cal${ext}_rear0_result.txt`
		camera_status_1=`check_cal_result cal${ext}_rear2_result.txt`
		if [ "$camera_status" == 1 -a "$camera_status_1" == 1 ]; then
			echo "1"
		else
			echo "0"
		fi
	elif [[ "$id" == "DUAL_04" || "$id" == "DUAL_40" ]]; then
		camera_status=`check_cal_result cal${ext}_rear0_result.txt`
		camera_status_1=`check_cal_result cal${ext}_rear4_result.txt`
		if [ "$camera_status" == 1 -a "$camera_status_1" == 1 ]; then
			echo "1"
		else
			echo "0"
		fi
	elif [[ "$id" == "DUAL_24" || "$id" == "DUAL_42" ]]; then
		camera_status=`check_cal_result cal${ext}_rear2_result.txt`
		camera_status_1=`check_cal_result cal${ext}_rear4_result.txt`
		if [ "$camera_status" == 1 -a "$camera_status_1" == 1 ]; then
			echo "1"
		else
			echo "0"
		fi
	elif [[ "$id" == "DUAL_13" || "$id" == "DUAL_31" ]]; then
		camera_status=`check_cal_result cal${ext}_front1_result.txt`
		camera_status_1=`check_cal_result cal${ext}_front3_result.txt`
		if [ "$camera_status" == 1 -a "$camera_status_1" == 1 ]; then
			echo "1"
		else
			echo "0"
		fi
	elif [[ "$id" == "DUAL_15" || "$id" == "DUAL_51" ]]; then
		camera_status=`check_cal_result cal${ext}_front1_result.txt`
		camera_status_1=`check_cal_result cal${ext}_front5_result.txt`
		if [ "$camera_status" == 1 -a "$camera_status_1" == 1 ]; then
			echo "1"
		else
			echo "0"
		fi
	elif [[ "$id" == "DUAL_35" || "$id" == "DUAL_53" ]]; then
		camera_status=`check_cal_result cal${ext}_front3_result.txt`
		camera_status_1=`check_cal_result cal${ext}_front5_result.txt`
		if [ "$camera_status" == 1 -a "$camera_status_1" == 1 ]; then
			echo "1"
		else
			echo "0"
		fi
	fi

	exit 0

	#if [ $? = 1 ]; then
	#	my_exit fail
	#else
	#	my_exit success
	#fi
}

modify_exposure_time() {
	syslog "================== CameraTest modify_exposure_time command start cameraId:$1, exposuretime:$2  is_dual:$is_dual ================="
	am broadcast -a asus.camera.setexptime --ei cameraId $1 --ei exposuretime $2 -f 0x10000000 > /dev/null
}

modify_camera_iso() {
	syslog "================== CameraTest modify_camera_iso command start cameraId $1, iso $2  is_dual:$is_dual ================="
	am broadcast -a asus.camera.iso --ei cameraId $1 --ei iso $2 -f 0x10000000 > /dev/null
}

modify_camera_ev() {
	syslog "================== CameraTest modify_camera_ev command start cameraId $1, ev $2  is_dual:$is_dual ================="
	am broadcast -a asus.camera.ev --ei cameraId $1 --ei ev $2 -f 0x10000000 > /dev/null
}


check_system() {
	#wait for system ready
	for i in `seq 300`; do
		test "`getprop sys.boot_completed`" -eq 1 && break
		sleep 1
	done

	#turn on panel
	#brightness=`cat /sys/class/backlight/panel0-backlight/brightness`
	#if [ "$brightness" == "0" ]; then
	#	input keyevent 26
	#	sleep 1
	#fi
}

help() {
	logd "help()"
	echo "
Test Tool Version: $VERSION

API: ATD TestCommand Interface $ATD_Interface_VERSION

FORMAT: adb shell $0 para1 para2 para3 ...

RETURN VALUE: 0/1 (0 = fail, 1 = pass)

USAGE:
$USAGE
"
	exit 0
}

check_usage() {
	if [ "$is_dual" -eq "1" ]; then
		USAGE='	<0. Enable/Disable Two Rear camera.>
		(para1) 0
		(para2) 0:off, 1:on
		(Para3): sensor mode index of rear1
		(Para4): sensor mode index of rear2
		(Para5): Timeout value in decimal.

	<1. Enable/Disable Two Front camera.>
		(para1) 1
		(para2) 0:off, 1:on
		(Para3): sensor mode index of rear1
		(Para4): sensor mode index of rear2
		(Para5): Timeout value in decimal.

	<2. Take picture command.>
		(para1) 2
		(para2) Saved picture file name
		(para3) Timeout value in decimal
		(para4) Default = 0 (Disable Merge Function)
			0: Disable Merge Function
			1: Enable Merge Function

	<3. Enable infinity mode or enable auto focus mode.>
		(para1) 3
		(para2) 0: AF mode (Keep VCM position)
			1: Enable infinity mode
			2: AF mode and auto focus

	<4. Take picture without af command.>
		(para1) 4
		(para2) Saved picture file name
		(para3) Timeout value in decimal
		(para4) Default = 0 (Disable Merge Function)
			0: Disable Merge Function
			1: Enable Merge Function

	<5. Take raw picture.>
		(para1) 5
		(para2) Saved picture file name
		(para3) Timeout value in decimal

	<6. Calibration.>
		(para1) 6
		(para2) 0: Rear1&2, 1: Front1&2

	<7. Get golden data.>
		(para1) 7
		(para2) 0: Rear1&2, 1: Front1&2

	<9. Take picture command (flash mode).>
		(para1) 9
		(para2) Saved picture file name
		(para3) Timeout value in decimal
		(para4) Default = 0 (Disable Merge Function)
			0: Disable Merge Function
			1: Enable Merge Function

	<10. Take picture without af command (flash mode).>
		(para1) 10
		(para2) Saved picture file name
		(para3) Timeout value in decimal
		(para4) Default = 0 (Disable Merge Function)
			0: Disable Merge Function
			1: Enable Merge Function

	<17. Qcom AE cali.>
		(para1) 17
		(para2) 0: Rear1&2, 1: Front1&2'
	else
		USAGE='	<0. Enable/Disable camera preview.>
		(para1) 0
		(para2) 0: off, 1: on
		(Para3): sensor mode index
		(Para4): Timeout value in decimal.

	<1. Enable/Disable VGA camera preview.>
		(para1) 1
		(para2) 0: off, 1: on
		(Para3): sensor mode index
		(Para4): Timeout value in decimal.


	<2. Take picture command.>
		(para1) 2
		(para2) Saved picture file name
		(para3) Timeout value in decimal

	<3. Enable infinity mode or enable auto focus mode.>
		(para1) 3
		(para2) 0: AF mode (Keep VCM position)
			1: Enable infinity mode
			2: AF mode and auto focus

	<4. Take picture without af command.>
		(para1) 4
		(para2) Saved picture file name
		(para3) Timeout value in decimal

	<5. Take raw picture.>
		(para1) 5
		(para2) Saved picture file name
		(para3) Timeout value in decimal

	<6. Calibration.>
		(para1) 6
		(para2) 0: Back camera	 ->	100: Back camera (2nd setting),		200: Back camera (3rd setting)
				1: Front camera	 ->	101: Front camera (2nd setting),	201: Front camera (3rd setting)
				2: Back camera2	 ->	102: Back camera2 (2nd setting),	202: Back camera2 (3rd setting)
				3: Front camera2 ->	103: Front camera2 (2nd setting),	203: Front camera2 (3rd setting)
				4: Back camera3	 ->	104: Back camera3 (2nd setting),	204: Back camera3 (3rd setting)

	<7. Get golden data.>
		(para1) 7
		(para2) 0: Back camera	 ->	100: Back camera (2nd setting),		200: Back camera (3rd setting)
				1: Front camera	 ->	101: Front camera (2nd setting),	201: Front camera (3rd setting)
				2: Back camera2	 ->	102: Back camera2 (2nd setting),	202: Back camera2 (3rd setting)
				3: Front camera2 ->	103: Front camera2 (2nd setting),	203: Front camera2 (3rd setting)
				4: Back camera3	 ->	104: Back camera3 (2nd setting),	204: Back camera3 (3rd setting)

	<8. Take picture in Pad Station.>
		(para1) 8
		(para2) Saved picture file name
		(para3) Timeout value in decimal

	<9. Take picture command (flash mode).>
		(para1) 9
		(para2) Saved picture file name
		(para3) Timeout value in decimal

	<10. Take picture without af command (flash mode).>
		(para1) 10
		(para2) Saved picture file name
		(para3) Timeout value in decimal

	<11. DIT/QCOM AF Calibration>
		(para1) 11
		(para2) 0: Back camera, 1: Front camera, 2: Back camera2
		(para3) Scene
			0: Generate dit_af_cali Result
			1: Inf
			2: Macro
			3: Middle(30cm)
			4: Middle(50cm)
		(para4) 0: record Vertical calibration
			1: OTP search
			2: Horizon calibration and record
			3: get PD data diff
			4: record laser data
			5: check PDAF result
			6: check laser AF result
			7: move to Calibration DAC

	<12. Modify the Camera Exposure Time.>
		(para1) 12
		(para2) 0: Back camera, 1: Front camera, 2: Back camera2, 4:Back camera3
		(para3) 0 = Auto, 1 = 1s, 2 = 1/2s, 4 = 1/4s, 8 = 1/8s, 15 = 1/15s, 30 = 1/30s,
			60 = 1/60s, 125 = 1/125s, 250 = 1/250s, 500 = 1/500s, 1000 = 1/1000s

	<13. Modify the Camera ISO.>
		(para1) 13
		(para2) 0: Back camera, 1: Front camera, 2: Back camera2, 4:Back camera3
		(para3) 0 = Auto, 25 = ISO25, 50 = ISO50, 100 = ISO100,
			200 = ISO200, 400 = ISO400, 800 = ISO800, 1600 = ISO1600
		(para4) 0 = Auto, 1 = A_Gain, 2 = D_Gain, 3 = ISP_Gain

	<14. Enable/Disable rear1 camera module2 preview.>
		(para1) 14
		(para2) 0: off, 1: on
		(Para3): sensor mode index
		(Para4): Timeout value in decimal.


	<15. Enable/Disable front2 camera module2 preview.>
		(para1) 15
		(para2) 0: off, 1: on
		(para3) Timeout value in decimal

	<16. Turn On/Off camera Laser switch/PhaseDifference switch.>
		(para1) 16
		(para2) 0: Back camera, 1: Front camera, 2: Back camera2
		(para3) 1: Laser switch, 2: PhaseDifference switch
		(para4) 0: off, 1: on

	<17. Qcom AE cali.>
		(para1) 17
		(para2) 0: Back camera, 1: Front camera, 2: Back camera2, 3: Front camera2, 4: Back camera3
		(para3) 0: Back camera ,1: Front camera, 2: Back camera2, 3: Front camera2, 4: Back camera3

	<18. Modify the Camera EV. Change Luma target>
		(para1) 18
		(para2) 0: Back camera, 1: Front camera, 2: Back camera2, 4: Back camera3
		(para3) EV step, eg: -12 to 12

	<19. Enable/Disable rear2 camera module2 preview.>
		(para1) 14
		(para2) 0: off, 1: on
		(Para3): sensor mode index
		(Para4): Timeout value in decimal.'
	fi
	if [ $# -eq 1 ] && in_str "$USAGE" "<$1\."; then
		USAGE=`busybox awk -v RS='\n\n' -v FS='\n' "/<$1\./" << EOF
$USAGE
EOF`
	fi
	test $# -le 1 && help
}

init() {
	#script log file
	SCRIPT_LOG_FILE="/sdcard/CameraTest_Script.log"

	#apk log file
	APK_LOG_FILE="/sdcard/CameraTest_Apk.log"

	#locat log file
	LOGCAT_LOG_FILE="/data/logcat_log/logcat.txt"

	if [ ! -d "/data/logcat_log/" ]; then
		mkdir /data/logcat_log/
	fi

	#if [ ! -d "/data/factory/" ]; then
	#	mkdir /data/factory/
	#fi

	rm -f $APK_LOG_FILE

}

check_cameraid_running() {
	id=`getprop camera.test.cameramode`

	if [ "$id" == 3 ] && [ "$1" == 4 ]; then #Back camera3 is camera id 3 for ROG3
		return 1
	elif [ "$id" == 4 ]; then
		if [ $1 -eq 0 -o $1 -eq 2 ]; then
			return 1
		else
			my_exit fail "$1 != id $id from prop camera.test.cameramode"
		fi
	elif [ "$id" == 6 ]; then
		if [ $1 -eq 2 -o $1 -eq 4 ]; then
			return 1
		else
			my_exit fail "$1 != id $id from prop camera.test.cameramode"
		fi
 	elif [ "$1" -ne "$id" ]; then

		my_exit fail "$1 != id $id from prop camera.test.cameramode"
	fi
}

Check_Screen() {
	#To wakeup system, keyevent 224
	input keyevent 224

}

#===============================
#main
#===============================
init
check_usage $@
check_system

if [ "$is_dual" -eq "1" ]; then
	syslog "================== CameraTest: set common DualCamera  $* SKU: $SKU ================"
	logi "================== CameraTest: set common DualCamera  $* SKU: $SKU ================"
else
	syslog "================== CameraTest: set common CameraTest  $* SKU: $SKU ================"
	logi "================== CameraTest: set common CameraTest  $* SKU: $SKU ================"
fi



#case $1$flow in
case $1 in
#0. Enable/Disable camera preview; DUAL: Enable/Disable Two Rear camera
#14. Enable/Disable rear2 camera module preview  binning mode
#19. Enable/Disable rear3 camera module3 preview

#1. Enable/Disable front camera preview
#15. Enable/Disable front2 camera module preview

0 | 1 | 14 | 15 | 19)

	Check_Screen

	if [ $1 -eq 15 ]; then # front2 camera
		echo "#NO support front2 camera"
	fi

	camera_preview_switch $1 $2 $3 $4

	id=`getprop camera.test.cameramode`
	#echo getprop camera.test.cameramode $id

	if [ "$2" == 0 ]; then
		set_timeout "close camera finish" $4
	else
		if [ "$is_dual" -eq "1" ]; then
			set_timeout "finish startPreview$1" $5 $is_dual
		else
			#echo "finish startPreview$1" $4  id $id
			set_timeout "finish startPreview$id" $4 $is_dual
		fi
	fi
;;

#2. Take picture command
#4. Take picture without af command
#9. Take picture command (flash mode)
#10. Take picture without af command (flash mode)
#5. Take raw picture
2 | 4 | 9 | 10 | 5)
	take_picture $1 $2
	set_timeout_takepic $@
;;

#3. Enable infinity mode or enable auto focus mode
3)
	rm -f $APK_LOG_FILE
	infinity_mode_switch $2
	set_timeout 'focus success'
;;

#6. calibration
#7. Get golden data
#6Q. Qcom AWB Calibration
#7Q. Get Qcom golden data
6 | 7 | 6Q | 7Q)
	check_dit && calibration $@
;;

#8. Take picture in Pad Station
8)
	my_exit TODO "TODO test 8"
;;

#8Q. Change AF setting
8Q)
	my_exit TODO "TODO test 8Q"
;;

#Kirin for QCOM 3A

#11. DIT AF Calibration
#11Q. Qcom AF Calibration
11 )
	shift #skip $1
	check_dit && af_calibration $@
	exit 0
;;

#12. Modify the Camera Exposure Time
12)
	shift #skip $1

	id=`getprop camera.test.cameramode`

	check_cameraid_running $1

	#set sub camera
	if [ "$id" == 4 ] && [ $1 -eq 2 ]; then # for Dualcam 0
		id=2
	elif [ "$id" == 6 ] && [ $1 -eq 4 ]; then # for Dualcam 1
		id=2
	fi



	syslog "================== CameraTest: Exposure CameraID="$id", Exposure="$2"  is_dual: $is_dual ================="

	if  [ $2 -eq 0 ]; then
		syslog "================== CameraTest: CameraID="$id"  set iso/exp to auto   ================="
		modify_camera_iso $id 0
		modify_exposure_time $id 0
	else
		modify_exposure_time $id $2
	fi

	set_timeout 'set_iso_exp done'
;;

#13. Modify the Camera ISO
13)
	shift #skip $1

	id=`getprop camera.test.cameramode`

	check_cameraid_running $1

	#set sub camera
	if [ "$id" == 4 ] && [ $1 -eq 2 ]; then # for Dualcam 0
		id=2
	elif [ "$id" == 6 ] && [ $1 -eq 4 ]; then # for Dualcam 1
		id=2
	fi

	#set sub camera
	if [ "$3" == 0 ]; then # auto gain
		setprop vendor.camera.ADGain 0
	elif [ "$3" == 1 ] ; then # A_gain_only
		setprop vendor.camera.ADGain 1
	elif [ "$3" == 2 ] ; then # D_gain only
		setprop vendor.camera.ADGain 2
	elif [ "$3" == 3 ] ; then # ISP_gain only
		setprop vendor.camera.ADGain 3
	else
		setprop vendor.camera.ADGain 0 # unusual: auto gain
	fi


	syslog "================== CameraTest: ISO CameraID="$id", ISO="$2"   is_dual:$is_dual  Gain="$3"  ================="


	if  [ $2 -eq 0 ]; then
		syslog "================== CameraTest: CameraID="$id"  set iso/exp to auto  ================="
		modify_camera_iso $id 0
		modify_exposure_time $id 0
	else
		modify_camera_iso $id $2
	fi

	set_timeout 'set_iso_exp done'
;;

#16. Turn On/Off camera Laser switch/PhaseDifference switch
16)
	#ASUS_BSP Byron porting from Ara +++
	log -p d -t Camera "CameraTest af_calibration command 16+++"
	##echo "command 16"
	case $3 in
	"1")
		#echo "command 16 case 1"
		log -p d -t Camera "command 16  Laser switch +++"
		af_calibration $2 8 $4
		#af_calibration
		;;
	"2")
		#echo "command 16 case 2"
		log -p d -t Camera "command 16 PhaseDifference switch+++"
		af_calibration $2 9 $4
		#af_calibration
		;;
	*)
		echo "Invalid argument!!(param3=$3)"
		log -p d -t Camera "error parameter in command 16 param3 should be 0 or 1 param3=$3 +++"
		;;
	esac
		#echo "????"
	log -p d -t Camera "CameraTest af_calibration command 16---"
  #ASUS_BSP Byron porting from Ara ---
;;

#17. Qcom AE cali for Kirin
17)
	shift #skip $1
	ae_calibration $@
;;

#18. Modify the Camera EV. Change Luma target>
18)
	shift #skip $1

	id=`getprop camera.test.cameramode`
	check_cameraid_running $1

	#set sub camera
	if [ "$id" == 4 ] && [ $1 -eq 2 ]; then # for Dualcam 0
		id=2
	elif [ "$id" == 6 ] && [ $1 -eq 4 ]; then # for Dualcam 1
		id=2
	fi


	syslog "================== CameraTest: EV CameraID = "$id", EV=$2   is_dual:$is_dual ================="

	modify_camera_ev $id $2

	set_timeout 'set_ev done'
;;

20)
	if [ "$MTK" -eq 0 ]; then
		#Qcom flow
		/vendor/bin/test_BinMerge $2
	else
		#MTK flow
		/vendor/bin/test_BinMerge_MTK $2
	fi

;;

21 | 22)
	if [ "$MTK" -eq 0 ]; then
		#Qcom flow
		test_qafCali $@
	else
		#MTK flow
		test_mafCali $@
	fi
	exit 0
;;

#Print usage
*)
	help
;;
esac

my_exit success "Default"
