// @file sns_cal.proto
//
// Defines standard message types for Calibration
//
// Copyright (c) 2016-2018, 2024 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
syntax = "proto2";
import "nanopb.proto";
import "sns_std_sensor.proto";

// Standard message IDs supported by Physical Sensors as well as Dynamic
// Calibration Sensors such as "gyro_cal", "mag_cal".
enum sns_cal_msgid
{
  option (nanopb_enumopt).long_names = false;

  // Request to reset calibration parameters for a Sensor.
  // Message: None
  SNS_CAL_MSGID_SNS_CAL_RESET =  512;

  // Calibration Event
  // Physical Sensors generate sns_cal_event to convey the factory calibration
  // being applied.
  // Dynamic Calibration Sensors generate this event to convey runtime estimated
  // calibration parameters.
  // Message: sns_cal_event
  SNS_CAL_MSGID_SNS_CAL_EVENT = 1022;
}

// Calibration Event
// A client receiving an sns_cal_event from a Dynamic Calibration Sensor can
// use it to correct sensor data received from the corresponding Physical
// Sensor. The correction can be applied as follows :
//
//  Convention :
//  Sc = Calibrated sensor sample
//  S = Sensor sample (Nx1 vector)
//  SF = Scaling factor to be applied to S
//  CM = compensation_matrix
//  B = bias
//  "*" represents matrix multiplication
//  ".*" represents element-by-element multiplication
//
//  if SF, B and CM are available,
//
//      Sc = CM * ((S .* SF) - B)
//
//  if only B and CM are available,
//
//      Sc = CM * (S - B)
//
//  if only SF and B are available,
//
//      Sc = ((S .* SF) - B)
//
//  if only SF is available,
//
//      Sc = S .* SF
//
//  if only B is available,
//
//      Sc = (S - B)
//
//  if only CM is available
//
//      Sc = CM * S
//
message sns_cal_event
{
  // Bias (B) in units of the Sensor.
  // Nx1 zero bias vector where N is the number of axes of the Sensor.
  // Bias is subtracted from the Sensor samples to get Calibrated samples.
  repeated float bias = 1;

  // Scaling Factor (SF)
  // Nx1 scale factor vector where N is the number of axes of the Sensor.
  // Scaling Factor is applied before subtracting bias to get Calibrated
  // samples.
  repeated float scale_factor = 2;

  // Compensation Matrix (CM)
  // NxN compensation matrix, where N is the number of axes of the Sensor, and
  // represented in row-major order.
  //      CM =  CM0  CM1  CM2
  //            CM3  CM4  CM5
  //            CM6  CM7  CM8
  repeated float comp_matrix = 3;

  // Quality of the calibration.
  required sns_std_sensor_sample_status status = 4 [default = SNS_STD_SENSOR_SAMPLE_STATUS_UNRELIABLE];

  // Calibration ID, a unique identifier for the calibration set being used.
  // As an example, could be used when there are distinct calibration sets for
  // a flip phone being open or closed.
  optional fixed32 cal_id = 5;
}


