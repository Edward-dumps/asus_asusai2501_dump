// @file sns_direct_channel.proto
//
// Defines the Sensing Hub Direct Channel Interface
//
// Copyright (c) 2020 - 2021, 2024 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.

syntax = "proto2";
import "nanopb.proto";
import "sns_std_type.proto";
import "sns_std.proto";

// To activate a Sensor Stream on a new Direct Channel:
// 1. Client must first create a channel using sns_direct_channel_create_msg.
// 2. Client may then optionally send a sns_direct_channel_set_ts_offset as part
//    of sns_direct_channel_config_msg to set timestamp offset for this channel.
//    The offset will be added to timestamps of all Sensor samples delivered on
//    this channel.
// 3. Client must then send sns_direct_channel_set_client_req as part of
//    sns_direct_channel_config_msg to start streaming the required Sensor on
//    this channel.
// 4. An ongoing Sensor stream can be reconfigured by resending the
//    sns_direct_channel_set_client_req with updated settings for the Sensor.
// 5. If Channel type is DIRECT_CHANNEL_TYPE_STRUCTURED_MUX_CHANNEL, Client may
//    stream additional Sensors on the same channel by sending additional
//    sns_direct_channel_set_client_req messages.
// 6. Client may remove an existing Sensor stream on a channel by sending
//    sns_direct_channel_remove_client_req as part of sns_direct_channel_config_msg
//    for the Sensor.

// Direct channel defined Message IDs
enum sns_direct_channel_msgid
{
  option (nanopb_enumopt).long_names = false;

  // Generic Channel Latency Event.
  // Message: sns_generic_channel_latency_msg
  SNS_DIRECT_CHANNEL_MSGID_SNS_GENERIC_CHANNEL_LATENCY_MSG = 20;
}

enum direct_channel_type {
   option (nanopb_enumopt).long_names = false;

  // Sensor data on this channel is of type sensors_event_t as defined by the
  // Android Open Source Project.
  // Sensor data from multiple streams can be multiplexed in one channel.
  DIRECT_CHANNEL_TYPE_STRUCTURED_MUX_CHANNEL = 0;

  // Sensor data on this channel is in the format defined in the Sensor's proto
  // API.
  // Channel only supports a single stream of Sensor data.
  DIRECT_CHANNEL_TYPE_GENERIC_CHANNEL = 1;
}

// Sensor Stream Configuration
message sns_direct_channel_stream_id {
  // SUID of the requested Sensor
  required sns_std_suid suid  = 1;

  // if set to true,  auto calibrated data is generated
  // if set to false, factory calibrated data is generated
  optional bool calibrated    = 2 [default = true];

  // if set to true,  resampled data is generated at a rate which is at most twice the requested rate
  // if set to false, data is generated at the rate defined by
  // SNS_STD_SENSOR_ATTRID_RATES, SNS_STD_SENSOR_ATTRID_ADDITIONAL_LOW_LATENCY_RATES
  // attributes for the Sensor.
  optional bool resampled     = 3 [ default = true];
}


// Direct Channel Creation Request Message
message sns_direct_channel_create_msg {

  // Shared memory buffer configuration
  message shared_buffer_config {

    // File descriptor to the shared memory buffer
    required fixed32 fd   = 1;

    // Size of the buffer
    required fixed32 size = 2;
  }
  required shared_buffer_config     buffer_config  = 1;

  // Type of channel
  required direct_channel_type      channel_type   = 2 ;

  //  Processor on which the client resides
  optional sns_std_client_processor client_proc    = 3 [ default = SNS_STD_CLIENT_PROCESSOR_APSS];
}


// Client Request Message
message sns_direct_channel_set_client_req {
  // Msg Id of the Request message as defined in the Sensor's API
  required fixed32                                  msg_id     = 1;

  // Sensor Stream Configuration
  required sns_direct_channel_stream_id             stream_id  = 2;

  // Request message as specified in sns_std.proto and the Sensor's API
  required sns_std_request                          request    = 3;

  // Attributes mandatory for DIRECT_CHANNEL_TYPE_STRUCTURED_MUX_CHANNEL
  message structured_mux_channel_stream_attributes {
    // Sensor ID for requested Sensor as defined by the Android Open Source
    // Project. This value will be populated in the "sensor_event_t::sensor" field
    // for the events delivered from this Sensor.
    required fixed32 sensor_handle = 1;

    // Sensor Type for requested Sensor as defined by the Android Open Source
    // Project. This value will be populated in the "sensor_event_t::type" field
    // for the events delivered from this Sensor.
    required fixed32   sensor_type = 2;
  }

  optional structured_mux_channel_stream_attributes attributes = 4;
}


// Direct Channel Remove Client Request message
message sns_direct_channel_remove_client_req {
  required sns_direct_channel_stream_id stream_id = 1;
}


// Set Timestamp Offset Message
// Clients requiring timestamps in the Client Processor Time Domain may use this
// message to convey the offset with Sensing Hub Time Domain.
// This offset will be added to the Sensing Hub timestamps of all Sensor samples
// delivered on the channel.
message sns_direct_channel_set_ts_offset {
  // Timestamp offset in clock ticks
  required fixed64 ts_offset = 1;
}


// Direct Channel Configuration Message
message sns_direct_channel_config_msg {

  oneof channel_config_msg_payload
  {
    sns_direct_channel_set_client_req     set_client_req      = 100;

    sns_direct_channel_remove_client_req  remove_client_req   = 101;

    sns_direct_channel_set_ts_offset set_ts_offset           = 102;
  }
}


// This message is used to convey latency performance metrics for the
// DIRECT_CHANNEL_TYPE_GENERIC_CHANNEL
// Latency is measured as the difference between the time when the sample is
// written to channel buffer and the sample measurement time.
message sns_generic_channel_latency_msg{

   // Number of samples associated with this measurement
   required fixed64 sample_count = 1;

   // Measurement timestamp of sample with maximum latency
   // Units: nano-seconds
   required fixed64 max_latency_ts = 2;

   // Maximum latency measured across all samples in sample_count
   // Units: micro-seconds
   required fixed32 max_latency = 3;

   // Average latency calculated across all samples in sample_count
   // Units: micro-seconds
   required fixed32 avg_latency = 4;
}



