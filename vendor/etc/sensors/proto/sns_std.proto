// @file sns_std.proto
//
// Defines standard messages for the Sensor API
//
// Copyright (c) 2016-2024 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
syntax = "proto2";
import "nanopb.proto";
import public "sns_std_type.proto";

option java_package = "com.qualcomm.qti.sensors";

// Framework-defined message IDs:
enum sns_std_msgid {
  option (nanopb_enumopt).long_names = false;

  // Request for all attributes of a Sensor.
  // Message: Empty
  // SNS_STD_MSGID_SNS_STD_ATTR_EVENT is generated in response with all
  // attributes associated with the Sensor.
  SNS_STD_MSGID_SNS_STD_ATTR_REQ = 1;

  // Request to flush a Sensor.
  // Message: Empty
  // Sensor responds by sending any unpublished events followed by a
  // SNS_STD_MSGID_SNS_STD_FLUSH_EVENT to indicate completion of the flush.
  // All Sensors must handle this flush request message.
  // If a Flush request is received before an enable request, Sensor may ignore
  // the flush request and respond with SNS_STD_ERROR_NOT_SUPPORTED.
  // If a Flush request is received while a previous flush request is still
  // being processed, Sensor may merge the flush requests by performing a single
  // flush and respond with a single SNS_STD_MSGID_SNS_STD_FLUSH_EVENT.
  SNS_STD_MSGID_SNS_STD_FLUSH_REQ = 2;

  // Request for debug data from a Sensor.
  // Message: Empty
  // Sensor may respond with one or more SNS_STD_MSGID_SNS_STD_DEBUG_RESP
  // messages containing on-demand debug data useful for developers.
  // If not supported, Sensor may respond with an error event.
  SNS_STD_MSGID_SNS_STD_DEBUG_REQ = 3;

  // Attribute Event
  // Message: sns_std_attr_event
  SNS_STD_MSGID_SNS_STD_ATTR_EVENT = 128;

  // Flush Event
  // Message: Empty
  SNS_STD_MSGID_SNS_STD_FLUSH_EVENT = 129;

  // Error Event
  // Message: sns_std_error_event
  SNS_STD_MSGID_SNS_STD_ERROR_EVENT = 130;

  // Debug data Event
  // SNS_STD_MSGID_SNS_STD_DEBUG_REQ.
  // Message: sns_std_debug_resp
  SNS_STD_MSGID_SNS_STD_DEBUG_RESP = 131;

  // Current resampler configuration event
  // Message: sns_std_resampler_config_event
  SNS_STD_MSGID_SNS_STD_RESAMPLER_CONFIG_EVENT = 133;

  // NOTE: 250-255 Are reserved
}

// Standard request message in which all requests must be encapsulated as
// payload.
message sns_std_request {
  message batch_spec {
    // Period in microseconds for which events are to be batched before
    // delivery. Batching can be disabled by setting batch_period to 0.
    // Events may be delivered to client at a faster rate due to other clients
    // batching requirements or due to system capacity limits.
    required uint32 batch_period = 1;

    // Sensor shall not drop data that is more recent than flush_period.
    // Sensor may drop data that is older than the flush_period.
    // Effective flush_period may be smaller due to system constraints,
    // or larger in the case of a concurrent client with a larger value.
    // flush_period, if set, should be greater than or equal to batch_period.
    // If batch_period > 0 and flush_period not specified,
    // then flush_period = batch_period.
    optional uint32 flush_period = 2;

    // If flush_only = true, the Sensor should only send data to the client
    // on receiving a flush request or if the Sensor cannot accumulate
    // flush_period worth of data.
    optional bool flush_only = 3 [default = false];

    // If max_batch = true for all requests, the Sensor should operate at
    // maximum batching capacity. If a request has both max_batch = true
    // and flush_only = true, flush_only takes precedence.
    optional bool max_batch = 4 [default = false];
  }
  // Batching is disabled by default
  optional batch_spec batching = 1;

  // Dynamic length payload, containing the actual configuration request.
  // This payload will need to be decoded separately, using the Sensor specific
  // API. If the request does not contain any message body then this field is
  // not present.
  optional bytes payload = 2;

  // Set to true if a client intends to be a passive client. Else it is an
  // active client request. Absence of this field shall be treated as an active
  // request.
  // If all requests to the Sensor are passive then it shall be in off
  // state.
  // If the Sensor has at least one active request then it shall be enabled
  // and configured according to all active and passive requests.
  // When all active clients are flush_only then passive clients are also
  // treated as flush_only.
  // When all active clients are event gated then passive clients are also
  // treated as event gated.
  // delivery_type field in passive requests shall be configured as
  // SNS_CLIENT_DELIVERY_NO_WAKEUP.
  optional bool is_passive = 3 [default = false];

  // Client specified permissions that can be used for this request
  message client_permissions
  {
    // Client specified list of technologies that can be used for this request
    // Sensor publishes list of technologies it uses in
    // SNS_STD_SENSOR_ATTRID_TECH_USED.
    // If Client specified list is a subset of Sensor published list,
    // Sensor may be able to operate with diminished capability.
    // If it cannot operate, Sensor shall reject request with error
    // SNS_STD_ERROR_NOT_SUPPORTED
    repeated sns_tech technologies = 1;
  }
  optional client_permissions permissions = 4;

}

// Sensor attributes event message.
message sns_std_attr_event {
  repeated sns_std_attr attributes = 1;
}

// Event message for error generated by a Sensor/Instance or the Framework
message sns_std_error_event {
  // Error Code
  required sns_std_error error = 1;
}

message sns_std_debug_resp {
  // partial_resp must be set to true if additional sns_std_debug_resp
  // messages will be sent, and set to false for the final debug message.
  // This allows debug data which is larger than the maximum payload/log size
  // to be transmitted across multiple responses.

  // Note: Please use the diag service get_max_log_size() to determine a
  // reasonable maximum payload size. See sns_diag_service.h for more details.
  optional bool   partial_resp = 1 [default = false];

  // Human-readable debug string
  // If "partial_resp==true", then multiple debug_string should be concatenated
  // to retrive the full string
  optional string debug_string = 2;

  // Binary debug data, as defined by a proto file.
  // The Sensor must provide the name of a proto file which indicates how to
  // decode the payload. To allow for automatic parsing of debug messages,
  // the proto file must define an enum with the name:
  // "<proto_filename>_msgid", with values "<proto_filename>_MSGID_<msg_name>".
  // The proto file shall define messages whose names conform to the format:
  // "<msg_name>" (as referenced by the associated MSGID enum values).
  //
  // The payload must contain a fully-formed encoded proto message.
  // If "partial_resp==true", additional encoded payloads may be sent in additional
  // sns_std_debug_resp messages.
  message binary_data {
    required string proto_filename = 1;
    required uint32 msgid          = 2;
    required bytes  payload        = 3;
  }
  optional binary_data debug_binary = 3;

}

message sns_std_resampler_config_event {
  // Effective rate at which the resampled sensor data is sent to the client
  optional float resampled_rate = 1;
}
