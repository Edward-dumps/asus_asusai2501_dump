// @file sns_hall.proto
//
// Defines the API for Hall Sensors.
// All Hall Sensor drivers are required to comply with this API.
// Any additional functionality for Hall Sensor may be defined in a
// device specific API file.
//
// Copyright (c) 2016-2018, 2020, 2024 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.

syntax = "proto2";
import "nanopb.proto";
import "sns_std_sensor.proto";
import "sns_physical_sensor_test.proto";

// Attribute requirements:
// The Hall Sensor publishes:
// 1. SNS_STD_SENSOR_ATTRID_TYPE attribute value as "hall".
// 2. SNS_STD_SENSOR_ATTRID_API attribute contains "sns_hall.proto"
// 3. SNS_STD_SENSOR_ATTRID_STREAM_TYPE as SNS_STD_SENSOR_STREAM_TYPE_ON_CHANGE.
// 4. SNS_STD_SENSOR_ATTRID_RANGES attribute values as 0 and 1.
// 5. See sns_std_sensor.proto for other attributes.

// Processing stream requests:
// 1. The Hall Sensor handles the SNS_STD_SENSOR_MSGID_SNS_STD_ON_CHANGE_CONFIG
//    message ID for all stream enable/update requests.
// 2. The Hall Sensor operates in on-change mode and report
//    samples only for magnet NEAR/FAR transitions.

// Publishing stream events:
// 1. The Hall Sensor publishes magnetic field proximity data stream
//    events using the sns_hall_event message.
// 2. Each stream event publishes an accuracy field:
//    SNS_STD_SENSOR_SAMPLE_STATUS_UNRELIABLE to mark invalid samples when hardware is
//    yet to stabilize after the sensor is configured.
//    SNS_STD_SENSOR_SAMPLE_STATUS_ACCURACY_HIGH to mark samples when they are valid.
// 3. The Hall Sensor publishes a configuration event using the
//    sns_std_sensor_physical_config_event message.
//    It publishes this event each time there is change in hardware config of the sensor
//    or when a client sends a new request.

// Processing self-test requests:
// 1. The Hall Sensor implements SNS_PHYSICAL_SENSOR_TEST_TYPE_COM test
//    type using the physical sensor test API.
// 2. The Hall Sensor may implement other test types.

// Publishing self-test events:
// 1. The Hall Sensor uses sns_physical_sensor_test_event message to publish
//    a test completion event.
// 2. The test_passed field in sns_physical_sensor_test_event is used to output the
//    pass/fail result of self-test execution.
// 3. The test_data field in sns_physical_sensor_test_event may be used to output any
//    driver-specific error data.


// Message IDs for hall Sensor
enum sns_hall_msgid
{
  option (nanopb_enumopt).long_names = false;

  // Data event from the hall sensor to its client.
  //
  // Message: sns_hall_event
  SNS_HALL_MSGID_SNS_HALL_EVENT  = 770;
}

enum sns_hall_event_type
{
  option (nanopb_enumopt).long_names = false;

  SNS_HALL_EVENT_TYPE_FAR   = 0;
  SNS_HALL_EVENT_TYPE_NEAR  = 1;
}

// Events types from hall Sensor
message sns_hall_event
{
  // Hall NEAR/FAR output event
  required sns_hall_event_type hall_event_type = 1 [default = SNS_HALL_EVENT_TYPE_FAR];

  // Hall sensor sample status
  required sns_std_sensor_sample_status status = 2 [default = SNS_STD_SENSOR_SAMPLE_STATUS_UNRELIABLE];
}

