// @file sns_device_mode.proto
//
// Defines the API for the Device Mode Sensor.
// Clients can use this API to be notified of changes to the supported
// device modes.
//
// Copyright (c) 2017-2018,2022-2024 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.

syntax = "proto2";
import "nanopb.proto";
import "sns_std_sensor.proto";


// Attribute requirements:
// The Device Mode Sensor publishes:
// 1. SNS_STD_SENSOR_ATTRID_TYPE: "device_mode"
// 2. SNS_STD_SENSOR_ATTRID_STREAM_TYPE: SNS_STD_SENSOR_STREAM_TYPE_ON_CHANGE
// 3. SNS_STD_SENSOR_ATTRID_API attribute contains "sns_device_mode.proto"
// 4. See sns_std_sensor.proto for other attributes.



// Processing stream requests:
// 1. The Device Mode sensor uses the SNS_STD_SENSOR_MSGID_SNS_STD_ON_CHANGE_CONFIG
//    to enable the sensor.

// Publishing stream events:
// 1. When one of the supported mode types change, the Device Mode Sensor publishes
//    a sns_device_mode_event with message ID
//    SNS_DEVICE_MODE_MSGID_SNS_DEVICE_MODE_EVENT containing the changed modes.
// 2. When a new client request is received, the sns_device_mode_event is
//    published with the full list of currently known modes.
// 3. The timestamp of the sns_device_mode_event corresponds to when the Sensor
//    sends the event.

// Message IDs for DEVICE_MODE Sensor
enum sns_device_mode_msgid
{
  option (nanopb_enumopt).long_names = false;

  SNS_DEVICE_MODE_MSGID_SNS_DEVICE_MODE_EVENT = 772;
}

enum sns_device_mode
{
  option (nanopb_enumopt).long_names = false;
  SNS_DEVICE_MODE_UNKNOWN = 0;
  SNS_DEVICE_MODE_FLIP_OPEN  = 1;
  SNS_DEVICE_MODE_LOCATION  = 2;
  SNS_DEVICE_MODE_AIRPLANE_MODE  = 3;
  SNS_DEVICE_MODE_MICROPHONE  = 4;
  SNS_DEVICE_MODE_WIFI_CONNECTIVITY  = 5;
  SNS_DEVICE_MODE_WIFI_SCAN  = 6;
  SNS_DEVICE_MODE_BLUETOOTH_CONNECTIVITY  = 7;
  SNS_DEVICE_MODE_BLUETOOTH_SCAN  = 8;
}

enum sns_device_state
{
  option (nanopb_enumopt).long_names = false;
  SNS_DEVICE_STATE_INACTIVE  = 0;
  SNS_DEVICE_STATE_ACTIVE  = 1;
  SNS_DEVICE_STATE_UNKNOWN = 2;
}

message sns_device_mode_event
{
  message mode_spec {
    required sns_device_mode mode = 1;

    required sns_device_state state = 2;
  }
  // Device Mode
  repeated mode_spec device_mode = 1;
}
